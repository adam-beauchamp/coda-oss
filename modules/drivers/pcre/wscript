import os
from waflib import Options, Utils
from waflib.TaskGen import feature, before, task_gen
from build import untarFile

def options(opt):
    opt.add_option('--disable-pcre', action='store_false', dest='enable_pcre',
                   help='turn off PCRE')
    opt.add_option('--enable-pcre', action='store_true',
                   default=True, help='turn on PCRE (default)')
    opt.add_option('--with-pcre-home', action='store', dest='pcre_home',
                   help='Specify the PCRE Home - where PCRE is installed to')
    opt.add_option('--build-pcre', action='store_true', dest='build_pcre',
                   help='force building PCRE from scratch',
                   default=os.path.exists(os.path.join(opt.path.abspath(), 'pcre-5.0.tar')))
    opt.add_option('--nobuild-pcre', action='store_false', dest='build_pcre',
                   help='force not building PCRE from scratch')

def configure(conf):
    #-- PCRE -------------------------------------------------------------------
    if Options.options.enable_pcre:

        pcreHome = Options.options.pcre_home
        if pcreHome:
            conf.check(lib='pcre', uselib_store='PCRE',
                       header_name='pcre.h', function_name='pcre_version',
                       libpath=os.path.join(pcreHome, 'lib'),
                       includes=os.path.join(pcreHome, 'include'),
                       msg='Checking for library pcre', okmsg=pcreHome,
                       mandatory=False)

        elif Options.options.build_pcre:
            # Build is off by default when tarfile not found, fail if forced on
            if not os.path.exists(os.path.join(conf.path.abspath(), 'pcre-5.0.tar')):
                conf.fatal('Missing pcre tarfile')

            conf.check_cc(function_name='memmove', header_name="string.h", mandatory=False)

            conf.env['MAKE_PCRE'] = True
            conf.msg('Building local lib', 'pcre')
            
            untarFile(path=conf.path, fname='pcre-5.0.tar')

        else:
            conf.check(lib='pcre', uselib_store='PCRE',
                       header_name='pcre.h', function_name='pcre_version',
                       msg='Checking for library pcre',
                       mandatory=False)

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.all_envs[variant]

    driversNode = bld.path
    
    sourceFiles = []

    if 'MAKE_PCRE' in env:
        fname = 'pcre-5.0'

        driverNode = driversNode.make_node(fname)
        
        #we need to do a few substitution transformations
        #these taken from the configure.in in the package
        pcreDict = dict(PCRE_MAJOR=5, PCRE_MINOR=0, PCRE_DATE='13-Sep-2004',
                        MATCH_LIMIT=10000000, POSIX_MALLOC_THRESHOLD=10,
                        HAVE_STRERROR=bld.is_defined('HAVE_STRERROR') and 1 or 0,
                        HAVE_MEMMOVE=bld.is_defined('HAVE_MEMMOVE') and 1 or 0,
                        HAVE_BCOPY=bld.is_defined('HAVE_BCOPY') and 1 or 0,
                        EBCDIC=0, NEWLINE="'\\n'", LINK_SIZE=2,
                        EXPORT=None)
        
        configH = bld(name='config_h', output='config.h',
                                   path=driverNode, env=env.derive(),
                                   defs=pcreDict)
        configH.features = ['makeHeader']
        
        pcreH = bld(name='pcre_in', input='pcre.in', output='pcre.h', env=env.derive(),
                                 dict=pcreDict, path=driverNode)
        pcreH.features = ['m4subst']
        
        #make the dftables executable
        appName = Options.platform.startswith('win32') and 'dftables.exe' or 'dftables'
        dfTablesNode = driverNode.find_or_declare(appName)
        dfTables = bld(features='c cprogram', source='dftables.c',
                                    includes=['.'],
                                    target='dftables',
                                    path=driverNode,
                                    install_path=None,
                                    env=env.derive(), name='dftables')

        # waf complains if dfTablesNode doesn't have a signature, just use the tar file's sig.
        if not os.path.exists(dfTablesNode.abspath()):
            dfTablesNode.sig = Utils.h_file(os.path.join(bld.path.abspath(), '%s.tar' % fname))
        charTables = bld(features='add_targets', source = dfTablesNode, path=driverNode,
                                      rule='${SRC} ${TGT}', target='chartables.c',
                                      install_path=None, deps=appName,
                                      env=env.derive(), targets_to_add='dftables')
        
        pcreposix = bld(features='c c%s' % env['LIB_TYPE'] or 'stlib',
                         includes=['.'], env=env.derive(),
                         target='pcreposix', source='pcreposix.c',
                         path=driverNode, export_includes='.',
                         defines=env['DEFINES'],
                         use='PCRE')
        if env['install_libs']:
            pcreposix.install_path = env['install_libdir']
        
        pcre = bld(features='c c%s add_targets' % env['LIB_TYPE'] or 'stlib',
                         includes=['.'],
                         export_includes='.',
                         target='pcre',
                         source='maketables.c get.c study.c pcre.c',
                         path=driverNode,
                         env=env.derive(),
                         name='PCRE',
                         use='chartables.c',
                         targets_to_add=['config_h', 'pcre_in'],
                         defines=env['DEFINES'])
        if env['install_libs']:
            pcre.install_path = env['install_libdir']
        
        if env['CC_NAME'] == 'msvc' and env['LIB_TYPE'] == 'shlib':
            pcre.defs='libpcre.def'
            pcreposix.defs='libpcreposix.def'

        if env['install_headers']:
            bld(features='install_tgt', install_path=env['install_includedir'],
                dir=driverNode, files=['pcre.h', 'pcreposix.h'], 
                name='PCRE_HEADERS_INSTALL')
            pcre.targets_to_add += ['PCRE_HEADERS_INSTALL']

        if env['install_source']:
            sourceFiles += [fname + '.tar']
            pcre.targets_to_add += ['PCRE_SOURCE_INSTALL']

    if env['install_source']:
        sourceNode = driversNode.make_node('source')
        bld.install_tgt(files = sourceFiles,
                        dir = driversNode,
                        install_path = os.path.join('${PREFIX}',
                        sourceNode.path_from(driversNode)),
                        relative_trick=True,
                        name='PCRE_SOURCE_INSTALL')

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.path.abspath(), d),
               ['pcre-5.0'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
