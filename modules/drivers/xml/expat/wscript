import os, sys
from os.path import join, exists
from waflib import Options
from waflib.TaskGen import feature, before, task_gen
from build import untarFile

SOURCE        = 'expat-2.0.0'
EXPAT_DEFINES = ['USE_EXPAT']

options = lambda x : None

def configure(conf):

    xmlHome = Options.options.xml_home
    xmlLayer = Options.options.xml_layer

    if xmlLayer == 'expat':
        # add defines
        # XML_STATIC depends on the --shared option
        expatDefines = EXPAT_DEFINES
        if not Options.options.shared_libs:
            expatDefines.append('XML_STATIC')
        conf.env.append_value('DEFINES_XML', expatDefines)

        # use an already built version
        if xmlHome:
            # attempt to test the third party library --
            # if test fails then fail the configure
            conf.check(lib='expat', uselib_store='XML',
                       header_name='expat.h',
                       function_name='XML_ExpatVersion',
                       libpath=join(xmlHome, 'lib'),
                       includes=join(xmlHome, 'include'),
                       msg='Checking for library expat', okmsg=xmlHome,
                       mandatory=True)        
        
        # build it with waf
        elif Options.options.build_xml:
            # check for the source tarball
            if not exists(join(conf.path.abspath(), SOURCE + '.tar')):
                conf.fatal('Missing expat tarfile')

            # untar and setup env
            conf.env['MAKE_EXPAT'] = True
            conf.env['MAKE_XML']   = True
            conf.msg('Building local lib', xmlLayer)
            untarFile(path=conf.path, fname=SOURCE + '.tar')

        # use an already built version that's on the system
        else:
            # if test fails then fail the configure
            conf.check(lib='expat', uselib_store='XML',
                       header_name='expat.h',
                       function_name='XML_ExpatVersion',
                       msg='Checking for library expat',
                       mandatory=True)


def build(bld):

    env = bld.get_env()
    sourceFiles = []
    
    # check it again just in case
    if 'MAKE_EXPAT' in env:
    
        expatNode = bld.path.make_node(SOURCE)
    
        expatDefs = ['PACKAGE_VERSION="2.0.0"',
                     'XML_CONTEXT_BYTES=1024',
                     'XML_DTD=1',
                     'XML_NS=1',
                     'PACKAGE_STRING="expat 2.0.0"']
        if not Options.options.shared_libs:
            expatDefs.append('XML_STATIC=1')
        
        sources = 'lib/xmlparse.c lib/xmltok.c lib/xmlrole.c'
        features = 'c c%s' % env['LIB_TYPE'] or 'stlib'
        if env['install_headers'] or env['install_source']:
            features += ' add_targets'

        expat = bld(features=features, source=sources,
                    includes='.', export_includes='lib',
                    target='expat', path=expatNode,
                    uselib='XML', name='XML', env=env.derive(),
                    defines=env['DEFINES'] + expatDefs)
        expat.targets_to_add = []
        if env['install_libs']:
            expat.install_path = env['install_libdir']

        if env['CC_NAME'] == 'msvc' and env['LIB_TYPE'] == 'shlib':
            expat.defs = 'lib/libexpat.def'
        
        if env['install_headers']:
            bld(features='install_tgt', install_path=env['install_includedir'],
                dir=expatNode, files=['lib/expat.h', 'lib/expat_external.h'], 
                name='XML_HEADERS_INSTALL')
            expat.targets_to_add += ['XML_HEADERS_INSTALL']

        if env['install_source']:
            sourceFiles += [SOURCE + '.tar']
            expat.targets_to_add += ['XML_SOURCE_INSTALL']

    # In the event that we used --with-xml-home to point to a pre-built
    # library, we still need a dummy XML_SOURCE_INSTALL target that doesn't
    # install anything.  This is needed in order to get this wscript
    # auto-magically installed.
    if env['install_source']:
        sourceNode = bld.path.make_node('source')
        bld.install_tgt(files=sourceFiles,
                        dir=bld.path,
                        install_path=join('${PREFIX}', sourceNode.path_from(bld.path)),
                        relative_trick=True,
                        name='XML_SOURCE_INSTALL')

def distclean(context):

    # remove the untarred directories
    import shutil
    dirs = filter(lambda x: exists(join(context.path.abspath(), x)), 
                  ['expat-1.95.7','expat-2.0.0'])
    for d in dirs:
        try:
            shutil.rmtree(join(context.path.abspath(), d), ignore_errors=True)
        except:{}
